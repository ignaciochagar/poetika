-- MySQL Script generated by MySQL Workbench
-- jue 25 abr 2024 13:43:58
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema musica
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `musica` ;

-- -----------------------------------------------------
-- Schema musica
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `musica` ;
USE `musica` ;

-- -----------------------------------------------------
-- Table `musica`.`artist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `musica`.`artist` (
  `artist_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `birth_date` DATE NULL,
  `is_alive` TINYINT NULL DEFAULT 1,
  PRIMARY KEY (`artist_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `musica`.`genre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `musica`.`genre` (
  `genre_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`genre_id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `musica`.`song`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `musica`.`song` (
  `song_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `length` INT UNSIGNED NOT NULL,
  `composer_id` INT UNSIGNED NULL,
  `genre_id` INT UNSIGNED NULL,
  PRIMARY KEY (`song_id`),
  INDEX `fk_song_artist1_idx` (`composer_id` ASC) VISIBLE,
  INDEX `fk_song_genre1_idx` (`genre_id` ASC) VISIBLE,
  CONSTRAINT `fk_song_artist1`
    FOREIGN KEY (`composer_id`)
    REFERENCES `musica`.`artist` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_song_genre1`
    FOREIGN KEY (`genre_id`)
    REFERENCES `musica`.`genre` (`genre_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `musica`.`band`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `musica`.`band` (
  `band_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `creation_date` DATE NULL,
  PRIMARY KEY (`band_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `musica`.`album`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `musica`.`album` (
  `album_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `release_year` INT NULL,
  `band_id` INT UNSIGNED NULL,
  PRIMARY KEY (`album_id`),
  INDEX `fk_album_band1_idx` (`band_id` ASC) VISIBLE,
  CONSTRAINT `fk_album_band1`
    FOREIGN KEY (`band_id`)
    REFERENCES `musica`.`band` (`band_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `musica`.`album_has_song`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `musica`.`album_has_song` (
  `album_id` INT UNSIGNED NOT NULL,
  `song_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`album_id`, `song_id`),
  INDEX `fk_album_has_song_song1_idx` (`song_id` ASC) VISIBLE,
  INDEX `fk_album_has_song_album_idx` (`album_id` ASC) VISIBLE,
  CONSTRAINT `fk_album_has_song_album`
    FOREIGN KEY (`album_id`)
    REFERENCES `musica`.`album` (`album_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_album_has_song_song1`
    FOREIGN KEY (`song_id`)
    REFERENCES `musica`.`song` (`song_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `musica`.`band_has_artist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `musica`.`band_has_artist` (
  `band_id` INT UNSIGNED NOT NULL,
  `artist_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`band_id`, `artist_id`),
  INDEX `fk_band_has_artist_artist1_idx` (`artist_id` ASC) VISIBLE,
  INDEX `fk_band_has_artist_band1_idx` (`band_id` ASC) VISIBLE,
  CONSTRAINT `fk_band_has_artist_band1`
    FOREIGN KEY (`band_id`)
    REFERENCES `musica`.`band` (`band_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_band_has_artist_artist1`
    FOREIGN KEY (`artist_id`)
    REFERENCES `musica`.`artist` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `musica`.`album_has_genre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `musica`.`album_has_genre` (
  `album_album_id` INT UNSIGNED NOT NULL,
  `genre_genre_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`album_album_id`, `genre_genre_id`),
  INDEX `fk_album_has_genre_genre1_idx` (`genre_genre_id` ASC) VISIBLE,
  INDEX `fk_album_has_genre_album1_idx` (`album_album_id` ASC) VISIBLE,
  CONSTRAINT `fk_album_has_genre_album1`
    FOREIGN KEY (`album_album_id`)
    REFERENCES `musica`.`album` (`album_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_album_has_genre_genre1`
    FOREIGN KEY (`genre_genre_id`)
    REFERENCES `musica`.`genre` (`genre_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
